// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/book.proto

//定义包名

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookServer_CreateBook_FullMethodName = "/book.BookServer/CreateBook"
	BookServer_GetBook_FullMethodName    = "/book.BookServer/GetBook"
)

// BookServerClient is the client API for BookServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServerClient interface {
	// 创建书籍
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
	// 通过name获取书籍
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
}

type bookServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServerClient(cc grpc.ClientConnInterface) BookServerClient {
	return &bookServerClient{cc}
}

func (c *bookServerClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, BookServer_CreateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServerClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, BookServer_GetBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServerServer is the server API for BookServer service.
// All implementations must embed UnimplementedBookServerServer
// for forward compatibility
type BookServerServer interface {
	// 创建书籍
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	// 通过name获取书籍
	GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error)
	mustEmbedUnimplementedBookServerServer()
}

// UnimplementedBookServerServer must be embedded to have forward compatible implementations.
type UnimplementedBookServerServer struct {
}

func (UnimplementedBookServerServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServerServer) GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServerServer) mustEmbedUnimplementedBookServerServer() {}

// UnsafeBookServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServerServer will
// result in compilation errors.
type UnsafeBookServerServer interface {
	mustEmbedUnimplementedBookServerServer()
}

func RegisterBookServerServer(s grpc.ServiceRegistrar, srv BookServerServer) {
	s.RegisterService(&BookServer_ServiceDesc, srv)
}

func _BookServer_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServerServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookServer_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServerServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookServer_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServerServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookServer_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServerServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookServer_ServiceDesc is the grpc.ServiceDesc for BookServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookServer",
	HandlerType: (*BookServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookServer_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookServer_GetBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/book.proto",
}
